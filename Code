# Movie Rating Prediction with Python

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score
import joblib

# Sample dataset (Replace this with actual IMDb dataset for real use)
data = {
    'Genre': ['Action', 'Drama', 'Comedy', 'Action', 'Drama'],
    'Director': ['S. S. Rajamouli', 'Rajkumar Hirani', 'Anurag Kashyap', 'Karan Johar', 'Rohit Shetty'],
    'Star1': ['Prabhas', 'Aamir Khan', 'Nawazuddin Siddiqui', 'Shah Rukh Khan', 'Ajay Devgn'],
    'IMDB_Rating': [8.5, 8.4, 7.8, 6.9, 5.7]
}

# Create DataFrame
df = pd.DataFrame(data)

# Preprocessing: Encode categorical columns using one-hot encoding
features = df[['Genre', 'Director', 'Star1']]
target = df['IMDB_Rating']
encoded_features = pd.get_dummies(features, drop_first=True)

# Define X and y
X = encoded_features
y = target

# Split the data into training and test sets (80-20 split)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error (MAE): {mae}")
print(f"RÂ² Score: {r2}")

# Save the model to a file
joblib.dump(model, "movie_rating_model.pkl")

# Predict a sample movie rating
sample = pd.DataFrame({
    'Genre': ['Action'],
    'Director': ['S. S. Rajamouli'],
    'Star1': ['Prabhas']
})

# Encode sample in the same way as training data
sample_encoded = pd.get_dummies(sample)
sample_encoded = sample_encoded.reindex(columns=X.columns, fill_value=0)

# Predict and print the sample rating
predicted_rating = model.predict(sample_encoded)
print(f"Predicted Rating for Sample Movie: {predicted_rating[0]}")
